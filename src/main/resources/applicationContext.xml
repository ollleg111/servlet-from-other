<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.1.xsd">

<!--    <bean id="testingBean" class="com.example1.TestBean">-->
<!--        <constructor-arg value="it is alive"/>-->
<!--    </bean>-->

<!--    <bean id="musicBean" class="com.example2.ClassicalMusic"/>-->
    <!--    <bean id="musicBean" class="com.example2.RockMusic"/>-->

    <!-- передача бина с помощью конструтора в качестве аргумента
        в xml в бине конструкция - <constructor>-->

<!--    <bean id="musicPlayer" class="com.example2.MusicPlayer">-->
<!--        <constructor-arg ref="musicBean"/>-->
<!--    </bean>-->

    <!-- передача бина с set (сетера) в качестве аргумента
        в xml в бине конструкция - <property>-->

<!--    <bean id="musicPlayer2" class="com.example3.MusicPlayer">-->
<!--        <property name="music" ref="musicBean"/>-->
<!--        <property name="name" value="Some name"/>-->
<!--        <property name="volume" value="50"/>-->
<!--    </bean>-->

    <!-- передача данных из внешнего файла-->
<!--    <context:property-placeholder location="classpath:musicPlayer.properties"/>-->
    <!--        <property name="name" value="${musicPlayer.name}"/>-->
    <!--        <property name="volume" value="${musicPlayer.volume}"/>-->

<!--    <bean id="musicPlayer3" class="com.example4.MusicPlayer">-->
<!--        <property name="music">-->
<!--            <list>-->
<!--                <ref bean="classic"/>-->
<!--                <ref bean="rock"/>-->
<!--                <ref bean="pop"/>-->
<!--            </list>-->
<!--        </property>-->
<!--        <property name="name" value="${musicPlayer.name}"/>-->
<!--        <property name="volume" value="${musicPlayer.volume}"/>-->
<!--    </bean>-->

    <!-- инициализация бинов для example4-->
<!--    <bean id="pop" class="com.example4.PopMusic"/>-->
<!--    <bean id="rock" class="com.example4.RockMusic"/>-->
<!--    <bean id="classic" class="com.example4.ClassicalMusic"/>-->

<!--    <bean id="music"-->
<!--          class="com.example4.RockMusic"-->
<!--          init-method="doMyInit"-->
<!--          destroy-method="doDestroy"/>-->

    <!-- внутри описание инит и дестрой метода, а также скоп - прототайп-->
<!--    <bean id="musicWithPrototype"-->
<!--          class="com.example4.PopMusic"-->
<!--          init-method="doMyInit"-->
<!--          destroy-method="doDestroy"-->
<!--          scope="prototype"/>-->

    <!-- создание бина с помощью фабричного метода-->
<!--    <bean id="musicWithFabric"-->
<!--          class="com.example4.ClassicalMusic"-->
<!--          factory-method="getClassicalMusic"/>-->

<!--    <context:component-scan base-package="com.example5"/>-->

    <!-- внедрение зависимостей через @Autowired-->
<!--    <context:component-scan base-package="com.example6"/>-->

    <!-- уточнение зависимости через @Qualifier-->
<!--    <context:component-scan base-package="com.example7"/>-->

    <!-- добавление новых аннотаций-->
<!--    <context:component-scan base-package="com.example8"/>-->
<!--    <context:property-placeholder location="classpath:musicPlayer.properties"/>-->



</beans>